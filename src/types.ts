import { Generated, Insertable, Selectable, Updateable } from 'kysely';

export interface Database {
    streamIn: StreamInTable;
    streamOut: StreamOutTable;
    httpSubscriber: HttpSubscriberTable;
    upstreamControl: UpstreamControlTable;
    user: UserTable;
    userEvent: UserEventTable;
}

export interface StreamInTable {
    id: Generated<number>;
    data: string;
}

export type StreamIn = Selectable<StreamInTable>;
export type NewStreamIn = Insertable<StreamInTable>;
export type StreamInUpdate = Updateable<StreamInTable>;

// This interface describes the `person` table to Kysely. Table
// interfaces should only be used in the `Database` type above
// and never as a result type of a query!. See the `Person`,
// `NewPerson` and `PersonUpdate` types below.
export interface StreamOutTable {
    // Columns that are generated by the database should be marked
    // using the `Generated` type. This way they are automatically
    // made optional in inserts and updates.
    id: Generated<number>;
    data: string;
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
export type StreamOut = Selectable<StreamOutTable>;
export type NewStreamOut = Insertable<StreamOutTable>;
export type StreamOutUpdate = Updateable<StreamOutTable>;

export interface HttpSubscriberTable {
    id: Generated<number>;
    url: string;
}

export type HttpSubscription = Selectable<HttpSubscriberTable>;
export type NewHttpSubscription = Insertable<HttpSubscriberTable>;
export type HttpSubscriptionUpdate = Updateable<HttpSubscriberTable>;

export interface UpstreamControlTable {
    id: Generated<number>;
    streamInId: number;
}

export type UpstreamControl = Selectable<UpstreamControlTable>;
export type NewUpstreamControl = Insertable<UpstreamControlTable>;
export type UpstreamControlUpdate = Updateable<UpstreamControlTable>;

export interface UserTable {
    id: Generated<number>;
    email: string;
}

export type User = Selectable<UserTable>;
export type NewUser = Insertable<UserTable>;
export type UserUpdate = Updateable<UserTable>;

export interface UserEventTable {
    id: Generated<number>;
    userId: number;
    userEventId: number;
    data: string;
}

export type UserEvent = Selectable<UserEventTable>;
export type NewUserEvent = Insertable<UserEventTable>;
export type UserEventUpdate = Updateable<UserEventTable>;
